@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeaders();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadOrderHeaders()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthorization();
        @if (IsAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(UserId);
        }
        // Load categories

        IsProcessing = false;
    }

    private async Task CheckAuthorization()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}
